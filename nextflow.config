trace.overwrite = true
process.executor = 'slurm'

// Define the base paths that can be overridden
params {
    // Boilerplate options
    input                        = null
    outdir                       = "./results"
    publish_dir_mode             = 'copy'
    run_mode                     = ""
    
    // Base directories that can be overridden
    db_base_dir                  = "${baseDir}/databases"
    bloom_db_dir                 = "${baseDir}/databases/biobloomfilters"
    sortmerna_db_dir             = "${baseDir}/databases/sortmerna"
    sourmash_db_dir              = "${baseDir}/databases/sourmash"
    humann_db_dir                = "${baseDir}/databases/humann"
    
    // Tool paths
    bowtie2_path                 = null
    
    // Database settings
    sortmerna_dbs                = ["smr_v4.3_default_db.fasta"]
    sourmash_db                  = ""
    sourmash_tax                 = ""
    
    // HUMAnN settings
    humann_test_protein_db       = null
    humann_protein_db            = null
    humann_nuc_db                = null
    humann_map_dir               = null
    
    // HUMAnN args for different modes
    humann_test_args             = "--bypass-nucleotide-search --threads 4 --memory-use minimum"
    humann_prod_args             = "--threads 16 --bypass-nucleotide-index --search-mode uniref90 --remove-temp-output"
}

// Process resource configurations
process {
    queue  = "ngs-sec"
    cpus   = {  1    * task.attempt }
    memory = { 6.GB  * task.attempt }
    time   = { 4.h   * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_single {
        cpus   = {  1                   }
        memory = {  1.GB * task.attempt }
        time   = {  4.h  * task.attempt }
    }
    withLabel:process_low {
        cpus   = { 2     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 6     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 12    * task.attempt }
        memory = { 200.GB * task.attempt }
        time   = { 120.h  * task.attempt }
    }
    withLabel:process_long {
        time   = { 200.h  * task.attempt }
    }
    withLabel:process_high_memory {
        memory = { 300.GB * task.attempt }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
    clusterOptions = {"--export=ALL -n ${task.cpus} --mem=${task.memory.toString().replaceAll(/[\sB]/,'')}"}
}

// Plugin configurations
plugins {
    id 'nf-schema@2.2.0'
}

// Environment profiles
profiles {
    conda {
        conda.enabled = true
        createTimeout = '1 h'
    }
    singularity {
        singularity {
            enabled = true
            autoMounts = true
            runOptions = '--unsquash'
        }
        conda.enabled = false
        singularity_pull_docker_container = false
    }
    
    // Test configuration
    test {
        params {
            run_mode = "test"
            humann_protein_db = "${params.humann_db_dir}/test/protein_database"
            humann_args = params.humann_test_args
        }
    }

    // Production configuration
    prod {
        params {
            run_mode = "prod"
            humann_protein_db = "${params.humann_db_dir}/gtdb202/uniref90/protein_database"
            humann_nuc_db = "${params.humann_db_dir}/gtdb202/uniref90"
            humann_map_dir = "${params.humann_db_dir}/utility_mapping"
            humann_args = params.humann_prod_args
        }
    }
}


// This might be overridden by user's custom config if it exists
try {
    includeConfig 'conf/custom.config'
} catch (Exception e) {
    // Custom config doesn't exist, using defaults
}
